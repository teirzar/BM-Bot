from aiogram import types
from config import bot, users, cafe, orders, types_base, bonus, messages
from functions import get_order_list_text, get_basket, add_log, get_tg_id, get_owner, get_time, cancel_order


async def get_admins() -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ users –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    admins = users.print_table('tg_id', where='status = 99')
    if admins:
        tpl_out = (el[0] for el in admins)
        return tuple(tpl_out)
    return tuple()


async def get_order_text(user_id, res):
    """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    res - tuple, –≤ –∫–æ—Ç–æ—Ä–æ–º 3 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
    price –∑–∞–∫–∞–∑–∞, discount - —Å–∫–∏–¥–∫–∞, lst - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, order_id - id –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ"""
    price, discount, lst, order_id = res
    comment = orders.print_table('comment', where=f'id = {order_id}')[0][0]
    text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ID_{order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{user_id}!\n–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π:\n\n"
    text += await get_order_list_text(await get_basket(user_id, lst=lst))
    text += f"\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {price}\n–°–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: {discount}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:\n{comment}"
    return text


def decor_private(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥"""
    async def wrapper(message: types.Message):
        tg_id = await get_tg_id(message)
        admins = await get_admins()
        if tg_id in admins:
            await add_log(f"TG_{tg_id} [—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥] [{func.__name__}]")
            await func(message)
        else:
            await add_log(f"TG_{tg_id} [–Ω–µ—É—Å–ø–µ—à–Ω–æ] [{func.__name__}]")
            await bot.send_message(tg_id, "–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return
    return wrapper


async def set_admin(data, delete=False) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –∞–¥–º–∏–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    if len(data) != 2:
        return f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n–ü—Ä–∏–º–µ—Ä: {'/deleteadmin' if delete else '/makeadmin'} 210189427"
    try:
        new_id = int(data[1])
    except ValueError:
        return f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Ü–∏—Ñ—Ä!\n" \
               f"–ü—Ä–∏–º–µ—Ä: {'/deleteadmin' if delete else '/makeadmin'} 210189427"
    if (new_id, ) not in users.print_table('tg_id'):
        return "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!"
    if delete:
        if new_id not in await get_admins():
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        users.update(f'status = 2', where=f'tg_id = {new_id}')
        return new_id
    if new_id in await get_admins():
        return "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
    users.update(f'status = 99', where=f'tg_id = {new_id}')
    return new_id


async def show_admins() -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö"""
    admins = users.print_table('id', 'tg_id', 'username', 'name', 'phone', where='status = 99')
    text = ""
    for i, t, u, n, p in admins:
        text += f"ID_{i}: Tg - {t}\nUsername - {u}\n–ò–º—è - {n}\n–¢–µ–ª–µ—Ñ–æ–Ω - {p}\n\n"
    return text


async def give_me_admin() -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–≥ –≤—ã–¥–∞—Ç—å —Å–µ–±–µ –∞–¥–º–∏–Ω–∫—É"""
    users.update(f'status = 99', where=f'tg_id = {get_owner()}')
    return


async def status_changer(changed_id, is_notification=False) -> int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ —Å 0 –Ω–∞ 1 –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç"""
    base = users if is_notification else cafe
    column = 'notification' if is_notification else 'status'
    current = base.print_table(column, where=f'id = {changed_id}')[0][0]
    base.update(f'{column} = {int(not current)}', where=f'id = {changed_id}')
    return int(not current)


async def get_current_orders_admin() -> tuple:
    """–§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    return orders.print_table('id', 'user_id', 'price', 'status', where=f'status in (1, 2, 3)')


async def admin_order_work(tg_id, order_id, cmd) -> tuple | str:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ä–∞–±–æ—Ç–æ–π —Å –Ω–∏–º–∏, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞"""
    order_data = orders.print_table('date_order', 'date_accept', 'date_complete', 'date_end', 'user_id', 'price',
                                    where=f'id = {order_id}')
    date_order, date_accept, date_complete, date_end, user_id, price = order_data[0]
    user_tg = users.print_table('tg_id', where=f'id = {user_id}')[0][0]
    date_now = await get_time()

    if date_end:
        return "–ó–∞–∫–∞–∑ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω."

    match cmd:

        case "accept":
            if any([date_accept, date_complete, date_end]):
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –æ–Ω —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç —Ä–∞–Ω–µ–µ."
            new_date, new_status = "date_accept", 2
            text_for_user = "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å! –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç!"

        case "complete":
            if any([date_complete, date_end]):
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤."
            new_date, new_status = "date_complete", 3
            text_for_user = "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –°–ø–µ—à–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç—ã–ª! üòäüòäüòä\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"

        case "cancel" | "unsuccessfully":
            new_date, new_status = "date_end", 5
            if cmd == "cancel":
                if date_complete:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ó–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤."
                text_for_user = await cancel_order(order_id, admin_id=tg_id)
                return f"–ó–∞–∫–∞–∑ ‚Ññ {order_id} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º TG_{tg_id}", text_for_user, user_tg
            text_for_user = "–í—ã –Ω–µ –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ë–æ–Ω—É—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç."

        case "successfully":
            new_date, new_status = "date_end", 4
            user_status = users.print_table('status', where=f'id = {user_id}')[0][0]
            discount = bonus.print_table('discount', where=f'status = {user_status}')[0][0] if user_status != 99 else 20
            cashback = int((price/100)*discount)
            users.update(f'bonus = bonus + {cashback}, total_price = total_price + {price}', where=f'id = {user_id}')
            text_for_user = f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {cashback} –±–æ–Ω—É—Å–æ–≤."
            if user_status not in (3, 99):
                current_total_price = users.print_table('total_price', where=f'id = {user_id}')[0][0]
                next_total_price, next_discount, next_name = bonus.print_table('price', 'discount', 'name',
                                                                               where=f'status = {user_status + 1}')[0]
                if current_total_price >= next_total_price:
                    users.update(f'status = {user_status + 1}', where=f'id = {user_id}')
                    text_for_user += f'\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ [{next_name}]!\n' \
                                     f'–¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∫—ç—à–±–µ–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {next_discount}% –æ—Ç –∑–∞–∫–∞–∑–∞! üòä\n' \
                                     f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!'

    name_status = types_base.print_table('name', where=f'base = "orders" and typ = {new_status}')[0][0]
    orders.update(f'status = {new_status}, {new_date} = "{date_now}", adm_id = {tg_id}', where=f'id = {order_id}')
    return f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID_{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ [{name_status}]", text_for_user, user_tg


async def get_cafe_column_names() -> dict:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cafe"""
    return dict(types_base.print_table('typ', 'name', where='base = "cafe_column"'))


async def get_current_food_value(food_id, column):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª—é–¥–∞ –∏–∑ –±–∞–∑—ã, –ø–æ id –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏"""
    return cafe.print_table(column, where=f'id = {food_id}')[0][0]


def inline_private(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ inline-–∫–æ–º–∞–Ω–¥"""
    async def wrapper(callback: types.CallbackQuery):
        tg_id = await get_tg_id(callback)
        if tg_id not in await get_admins():
            await add_log(f'TG_{tg_id} [–Ω–µ—É—Å–ø–µ—à–Ω–æ] [{func.__name__}]')
            await callback.message.delete()
            return await callback.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert=True)
        await func(callback)
        return
    return wrapper


async def get_current_messages_admin() -> tuple:
    """–§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return messages.print_table('id', 'tg_id', 'time', where=f'adm_id is NULL')


async def get_text_message(message_id) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    tg_id, message, date = messages.print_table('tg_id', 'message', 'time', where=f'id = {message_id}')[0]
    user_id, sep = users.print_table('id', where=f'tg_id = {tg_id}')[0][0], f'\n{"=" * 15}\n'
    return f'–°–æ–æ–±—â–µ–Ω–∏–µ ID_{message_id}.\n–û—Ç: ID_{user_id} (TG_{tg_id})\n{sep}Text: <{message}>{sep}\n–î–∞—Ç–∞: {date}'


async def is_read(message_id) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, –∏ False –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"""
    return bool(messages.print_table('adm_id', where=f'id = {message_id}')[0][0])


async def make_message_read(tg_id, message_id) -> str | None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É,
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–ª–∏ –Ω–∞ –Ω–µ–≥–æ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç"""
    if await is_read(message_id):
        return "–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, –∏–ª–∏ –Ω–∞ –Ω–µ–≥–æ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç."
    now = await get_time()
    messages.update(f'answer_time = "{now}", adm_id = {tg_id}', where=f'id = {message_id}')
    return


async def send_to_admins(text, kb=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Ç—Ä–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    [await bot.send_message(admin, text, reply_markup=kb) for admin in await get_admins()]
