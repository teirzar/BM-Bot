from aiogram import types
from config import users, bonus, types_base, cafe, orders
from functions import get_time, add_log


async def get_tg_id(message: types.Message | types.CallbackQuery) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return int(message['from'].id)


async def get_user_id(message: types.Message | types.CallbackQuery) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return int(users.print_table('id', where=f"tg_id = {await get_tg_id(message)}")[0][0])


async def get_profile_text(user_id) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ '–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ñ–æ'. """
    users_dict = dict(zip(users.names(), *users.print_table(where=f"id = {user_id}")))
    bonus_dic = dict(bonus.print_table('name', 'price'))
    status = list(bonus_dic.keys())
    total_prices = list(bonus_dic.values())
    need_money = None
    if users_dict['status'] not in (3, 99):
        need_money = total_prices[users_dict['status'] + 1] - users_dict['total_price']
    next_status = "\n<i>–î–æ —Å—Ç–∞—Ç—É—Å–∞ '" + status[users_dict['status']+1] + f"': {need_money}—Ä.</i>" if need_money else ''
    text = f"""<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n
    üÜî ID: {users_dict['id']}
    üìá –ò–º—è: {users_dict['name']}
    üì± –¢–µ–ª–µ—Ñ–æ–Ω: {users_dict['phone'] if users_dict['phone'] else "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!"}
    üí∞ –ë–æ–Ω—É—Å—ã: {users_dict['bonus']}
    üòé –°—Ç–∞—Ç—É—Å: {status[users_dict['status']] if users_dict['status'] != 99 else 'ADMIN'}{next_status}
    üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–≤–∫–ª." if users_dict['notification'] else "–≤—ã–∫–ª."}
    \n–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –≤\n‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings)"""
    return text


async def get_prev_orders(user_id, tg_id) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' """
    user_orders, total_price = users.print_table('orders', 'total_price', where=f'id = {user_id}')[0]
    if not user_orders:
        return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."
    text = f"–£ –≤–∞—Å {len(user_orders.split())} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_price} —Ä—É–±.\n"
    current_order = orders.print_table('body', where=f'user_id = {user_id} and status = 0')
    if current_order and current_order[0][0]:
        text += f'\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã ' \
                f'{await get_text_basket(tg_id, user_id, full=True)}'
    text += f"\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–∫–∞–∑–æ–≤:"
    return text


async def get_type_food_id(text) -> int:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏,
    –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–ª–∞–π–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    food_type = types_base.print_table('typ', where=f'base = "cafe" and name = "{text[1:].strip()}"')
    return food_type[0][0]


async def get_orders(user_id) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ID –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_orders = users.print_table('orders', where=f'id = {user_id}')
    return user_orders[0][0] if user_orders and user_orders[0][0] else ""


async def check_order(income_id, is_user_id=False):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ, –∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–í –∫–æ—Ä–∑–∏–Ω–µ",
    —Ç–∞–∫–∂–µ –ø–æ–ø—É—Ç–Ω–æ –≤–Ω–æ—Å—è –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = income_id if is_user_id else users.print_table('id', where=f'tg_id = {income_id}')[0][0]
    if (user_id, ) not in orders.print_table('user_id', where=f'status = 0'):
        orders.write('user_id', 'body', 'date_start', 'status', values=f'{user_id}, "", "{await get_time()}", 0')
        order_id = orders.print_table('id', where=f'status = 0 and user_id = {user_id}')[0][0]
        current_orders = users.print_table('orders', where=f'id = {user_id}')[0][0]
        current_orders = f'{current_orders} {order_id}' if current_orders else order_id
        users.update(f'orders = "{current_orders}"', where=f'id = {user_id}')


async def get_food_kb_info(food_id) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö, –¥–∏–∑–ª–∞–π–∫–∞—Ö –Ω–∞ –±–ª—é–¥–µ, —Ç–∏–ø –±–ª—é–¥–∞"""
    typ, dislike, like = cafe.print_table('type', 'dislikes', 'likes', where=f'id = {food_id}')[0]
    dislike, like = len(dislike.split()), len(like.split())

    return typ, dislike, like


async def get_food_text(food_id) -> tuple:
    """–§—É–Ω–∫—Ü–∏—è, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞"""
    name, caption, composition, weight, price, image, type_food = \
        cafe.print_table('name', 'caption', 'composition', 'weight', 'price', 'image', 'type',
                         where=f'id = {food_id}')[0]
    pt = "–≥—Ä" if type_food != 50 else "–º–ª"
    text = f"<b>{name}\n{weight} {pt}., {price}—Ä—É–±.</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{caption}\n\n–°–æ—Å—Ç–∞–≤:\n{composition}"
    return text, image


async def get_basket(user_id, lst=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á - id –±–ª—é–¥–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    await check_order(user_id, is_user_id=True)
    if not lst:
        lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    basket = {el.split(":")[0]: int(el.split(":")[1]) for el in lst.split()}
    return basket


async def set_order(user_id, food_id, cmd) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    await check_order(user_id, is_user_id=True)

    order_id, current_lst = orders.print_table('id', 'body', where=f'user_id = {user_id} and status = 0')[0]
    current_basket = await get_basket(user_id, current_lst) if current_lst else {}

    match cmd:
        case "plus":
            if food_id not in current_basket:
                if len(current_basket) > 11:
                    return "–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 12 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!"
                new_food = f"{current_lst} {food_id}:1"
                orders.update(f'body = "{new_food.strip()}"', where=f'id = {order_id}')
                return 1
            if current_basket[food_id] + 1 > 15:
                return "–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 15 –ø–æ—Ä—Ü–∏–π –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞!"
            current_basket[food_id] += 1
        case "minus" | "delete":
            if food_id not in current_basket:
                return "–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ!"
            if cmd == "delete" or not current_basket[food_id] - 1:
                current_basket.pop(food_id)
            else:
                current_basket[food_id] -= 1

    orders.update(f'body = "{" ".join([f"{f}:{c}" for f, c in current_basket.items()]).strip()}"',
                  where=f'id = {order_id}')
    return current_basket.get(food_id, 0)


async def get_count(tg_id, current_id=None) -> tuple:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–∫–∞–∑–µ,
    –∞ —Ç–∞–∫ –∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = users.print_table('id', where=f'tg_id = {tg_id}')[0][0]

    await check_order(tg_id)

    current_lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    basket = await get_basket(user_id, current_lst)
    food_count = 0
    if current_id and str(current_id) in basket:
        food_count = basket[str(current_id)]
    total_price = sum([cafe.print_table('price', where=f'id = {k}')[0][0] * int(v) for k, v in basket.items()])
    basket_count = sum(basket.values())
    return basket_count, total_price, food_count


async def clear_basket(user_id) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    if lst:
        orders.update('body = ""', where=f'user_id = {user_id} and status = 0')
        return "–ö–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞!"
    return 0


async def set_rating(food_id, user_id, cmd) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω–∞ –±–ª—é–¥–∞—Ö"""
    altcmd = "dislikes" if cmd == "like" else "likes"
    lst, altlst = cafe.print_table(f'{cmd}s', altcmd, where=f'id = {food_id}')[0]
    if str(user_id) in lst.split():
        return f"–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ {cmd} —ç—Ç–æ–º—É –±–ª—é–¥—É!"

    new_lst = (lst + " " + str(user_id)).strip()
    if str(user_id) in altlst.split():
        altlst = altlst.split()
        altlst.remove(str(user_id))
        new_altlst = " ".join(altlst) if len(altlst) else ""
        cafe.update(f'{altcmd} = "{new_altlst}"', where=f'id = {food_id}')

    cafe.update(f'{cmd}s = "{new_lst}"', where=f'id = {food_id}')
    return 0


async def get_order_list_text(basket):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¢–û–õ–¨–ö–û —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö —Ü–µ–Ω–∞"""
    names = {i: k for i, *k in cafe.print_table('id', 'name', 'price')}
    text = ""
    for i, count in basket.items():
        text += f"{names[int(i)][0]} - {count} —à—Ç. ({names[int(i)][1] * count} —Ä—É–±.)\n"
    return text


async def get_text_basket(tg_id, user_id, full=False) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    basket = await get_basket(user_id)
    basket_count, total_price, food_count = await get_count(tg_id)
    discount = await get_current_discount(user_id)
    text = f"–≤ –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{basket_count} —Ç–æ–≤–∞—Ä–∞(-–æ–≤) –Ω–∞ —Å—É–º–º—É {total_price} —Ä—É–±." \
        if len(basket) else "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    text += f" (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ —Ü–µ–Ω–∞: {total_price - discount} —Ä—É–±.)\n\n" if discount else "\n\n"
    if full:
        text += await get_order_list_text(basket)
    return text


async def get_user_bonus(user_id) -> int:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return users.print_table('bonus', where=f'id = {user_id}')[0][0]


async def get_user_status(user_id) -> tuple | str:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—ç—à–±–µ–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status = users.print_table('status', where=f'id = {user_id}')[0][0]
    if status == 99:
        return "–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –∑–∞–∫–∞–∑!"
    discount, status_name = bonus.print_table("discount", "name", where=f'status = {status}')[0]
    return discount, status_name


async def get_current_discount(user_id) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –∑–∞–∫–∞–∑–µ"""
    return orders.print_table('bonus', where=f'user_id = {user_id} and status = 0')[0][0]


async def set_order_price(tg_id, user_id) -> int:
    """–§—É–Ω–∫—Ü–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    basket_count, total_price, food_count = await get_count(tg_id)
    orders.update(f'price = {total_price}', where=f'user_id = {user_id} and status = 0')
    return total_price


async def is_bonus_activated(user_id) -> bool | str:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ–Ω—É—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ"""
    await check_order(user_id, is_user_id=True)
    try:
        return orders.print_table('bonus', where=f'user_id = {user_id} and status = 0')[0][0]
    except IndexError:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!"


async def update_user_bonus(user_id) -> tuple | str:
    """–§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É –∫ –∑–∞–∫–∞–∑—É"""
    if not await get_basket(user_id):
        return "–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!"
    tg_id, current_discount = users.print_table('tg_id', 'bonus', where=f'id = {user_id}')[0]
    order_price = await set_order_price(tg_id, user_id)
    check_price = order_price >= current_discount
    user_bonus = 0 if check_price else current_discount - order_price
    new_price = order_price - current_discount if check_price else 0
    current_discount = current_discount if check_price else order_price

    users.update(f'bonus = {user_bonus}', where=f'id = {user_id}')
    orders.update(f'price = {new_price}, bonus = {current_discount}', where=f'user_id = {user_id} and status = 0')

    return new_price, user_bonus, current_discount


async def make_purchase(user_id, tg_id) -> str | tuple:
    """–§—É–Ω–∫—Ü–∏—è, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º–∞—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    await check_order(user_id, is_user_id=True)
    lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    lst_status_1 = orders.print_table('id', where=f'user_id = {user_id} and status = 1')
    if len(lst_status_1) > 2:
        return "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤! –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è!"
    if not lst:
        return "–í –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!"
    order_id = orders.print_table('id', where=f'user_id = {user_id} and status = 0')[0][0]
    basket_count, total_price, food_count = await get_count(tg_id)
    discount = await get_current_discount(user_id)
    date = await get_time()
    orders.update(f'status = 1, price = {total_price - discount}, date_order = "{date}"',
                  where=f'user_id = {user_id} and status = 0')
    return total_price - discount, discount, lst, order_id


async def cancel_order(order_id, admin_id=None) -> None | str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ"""
    status = await get_order_status(order_id)
    if status not in (1, 2):
        return
    date = await get_time()
    user_id, discount = orders.print_table('user_id', 'bonus', where=f'id = {order_id}')[0]
    cancel_text = f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω"
    if status == 1 or admin_id:
        orders.update(f'date_end = "{date}", {f"adm_id = {admin_id}, " if admin_id else ""}status = 5',
                      where=f'id = {order_id}')
        cancel_text += f' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' if admin_id else ''
        if discount:
            cancel_text += f", –≤–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {discount} –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å."
            users.update(f'bonus = bonus + {discount}', where=f'id = {user_id}')
        return cancel_text
    orders.update(f'date_end = "{date}", status = 5', where=f'id = {order_id}')
    cancel_text += f'. –ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, ' \
                   f'–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ {discount} —Ä—É–±. –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–µ –≤–µ—Ä–Ω—É—Ç—Å—è.' if discount else '.'
    return cancel_text


async def get_order_info(order_id, is_admin=False) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –∞—Ä—Ö–∏–≤–µ"""
    order = orders.print_table('user_id', 'date_start', 'date_order', 'date_accept', 'date_end', 'body', 'price',
                               'bonus', 'status', 'comment', where=f'id = {order_id}')
    user_id, date_start, date_order, date_accept, date_end, body, price, discount, status, comment = order[0]
    body_text = await get_order_list_text(await get_basket(user_id, body))
    name_status = types_base.print_table('name', where=f'base = "orders" and typ = {status}')[0][0]
    if not status:
        if not price:
            price = "–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤ –º–æ–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤."
    txt = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ {order_id}:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
    txt += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:\n{date_start}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n{date_order}\n" \
           f"–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:\n{date_accept}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:\n{date_end}\n" if not is_admin else ""
    txt += f'–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{body_text}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å{" (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)" if discount else ""}: {price} —Ä—É–±.\n' \
           f'–°–∫–∏–¥–∫–∞: {discount} —Ä—É–±.\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {name_status}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}\n'
    return txt


async def get_order_status(order_id) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ """
    return orders.print_table('status', where=f'id = {order_id}')[0][0]


def decor_check_username(func):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏–∑–º–µ–Ω–µ–Ω username –≤ Telegram"""
    async def wrapper(message: types.Message | types.CallbackQuery):
        tg_id = await get_tg_id(message)
        username = users.print_table('username', where=f'tg_id = {tg_id}')[0][0]
        if message["from"].username != username:
            await add_log(f"TG_{tg_id} username –∏–∑–º–µ–Ω–µ–Ω —Å [{username}] –Ω–∞ [{message['from'].username}]")
            users.update(f'username = "{message["from"].username}"', where=f'tg_id = {tg_id}')
        return await func(message)
    return wrapper


async def remake_order(order_id, user_id) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑" –≤ –∞—Ä—Ö–∏–≤–µ –∑–∞–∫–∞–∑–æ–≤."""
    body = orders.print_table('body', where=f'id = {order_id}')[0][0]
    await check_order(user_id, is_user_id=True)
    orders.update(f'body = "{body}"', where=f'user_id = {user_id} and status = 0')
