from aiogram import types
from config import users, bonus, types_base, cafe, orders
from functions import get_time


# get telegram id
async def get_tg_id(message: types.Message | types.CallbackQuery) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return int(message['from'].id)


# get user id
async def get_user_id(message: types.Message | types.CallbackQuery) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return int(users.print_table('id', where=f"tg_id = {await get_tg_id(message)}")[0][0])


# get admins
async def get_admins() -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ users –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    admins = users.print_table('tg_id', where='status = 99')
    if admins:
        tpl_out = (el[0] for el in admins)
        return tuple(tpl_out)
    return tuple()


# get profile text
async def get_profile_text(user_id) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ '–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ñ–æ'. """
    users_dict = dict(zip(users.names(), *users.print_table(where=f"id = {user_id}")))
    bonus_dic = dict(bonus.print_table('name', 'price'))
    status = list(bonus_dic.keys())
    total_prices = list(bonus_dic.values())
    need_money = None
    if users_dict['status'] not in (3, 99):
        need_money = total_prices[users_dict['status'] + 1] - users_dict['total_price']
    next_status = "\n<i>–î–æ —Å—Ç–∞—Ç—É—Å–∞ '" + status[users_dict['status']+1] + f"': {need_money}—Ä.</i>" if need_money else ''
    text = f"""<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n
    üÜî ID: {users_dict['id']}
    üìá –ò–º—è: {users_dict['name']}
    üì± –¢–µ–ª–µ—Ñ–æ–Ω: {users_dict['phone'] if users_dict['phone'] else "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!"}
    üí∞ –ë–æ–Ω—É—Å—ã: {users_dict['bonus']}
    üòé –°—Ç–∞—Ç—É—Å: {status[users_dict['status']] if users_dict['status'] != 99 else 'ADMIN'}{next_status}
    üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–≤–∫–ª." if users_dict['notification'] else "–≤—ã–∫–ª."}
    \n–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –≤\n‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings)"""
    return text


# get prev orders text
async def get_prev_orders(user_id) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' """
    return "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã: –í –†–ê–ó–†–ê–ë–û–¢–ö–ï"


async def get_type_food_id(text) -> int:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏,
    –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–ª–∞–π–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    food_type = types_base.print_table('typ', where=f'base = "cafe" and name = "{text[1:].strip()}"')
    return food_type[0][0]


async def get_food_kb_info(food_id) -> tuple:
    """"–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö, –¥–∏–∑–ª–∞–π–∫–∞—Ö –Ω–∞ –±–ª—é–¥–µ, —Ç–∏–ø –±–ª—é–¥–∞"""
    typ, dislike, like = cafe.print_table('type', 'dislikes', 'likes', where=f'id = {food_id}')[0]
    dislike, like = len(dislike.split()), len(like.split())

    return typ, dislike, like


async def get_food_text(food_id) -> tuple:
    """–§—É–Ω–∫—Ü–∏—è, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞"""
    name, caption, composition, weight, price, image, type_food = \
        cafe.print_table('name', 'caption', 'composition', 'weight', 'price', 'image', 'type',
                         where=f'id = {food_id}')[0]
    pt = "–≥—Ä" if type_food != 50 else "–º–ª"
    text = f"<b>{name}\n{weight} {pt}., {price}—Ä—É–±.</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{caption}\n\n–°–æ—Å—Ç–∞–≤:\n{composition}"
    return text, image


async def get_basket(user_id, lst=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á - id –±–ª—é–¥–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    if not lst:
        lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    basket = {el.split(":")[0]:int(el.split(":")[1]) for el in lst.split()}
    return basket


async def set_order(user_id, food_id, cmd) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    order_id, current_lst = orders.print_table('id', 'body', where=f'user_id = {user_id} and status = 0')[0]
    current_basket = await get_basket(user_id, current_lst) if current_lst else {}

    match cmd:
        case "plus":
            if food_id not in current_basket:
                if len(current_basket) > 11:
                    return "–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 12 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!"
                new_food = current_lst + f" {food_id}:1"
                orders.update(f'body = "{new_food}"', where=f'id = {order_id}')
                return 1
            if current_basket[food_id] + 1 > 15:
                return "–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 15 –ø–æ—Ä—Ü–∏–π –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞!"
            current_basket[food_id] += 1
        case "minus" | "delete":
            if food_id not in current_basket:
                return "–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ!"
            if cmd == "delete" or not current_basket[food_id] - 1:
                current_basket.pop(food_id)
            else:
                current_basket[food_id] -= 1

    orders.update(f'body = "{" ".join([f"{f}:{c}" for f, c in current_basket.items()])}"', where=f'id = {order_id}')
    return current_basket.get(food_id, 0)


async def get_count(tg_id, current_id=None) -> tuple:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–∫–∞–∑–µ,
    –∞ —Ç–∞–∫ –∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = users.print_table('id', where=f'tg_id = {tg_id}')[0][0]

    if (user_id, ) not in orders.print_table('user_id'):
        orders.write('user_id', 'body', 'date_start', 'status', values=f'{user_id}, "", "{await get_time()}", 0')

    current_lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    basket = await get_basket(user_id, current_lst)
    food_count = 0
    if current_id and str(current_id) in basket:
        food_count = basket[str(current_id)]
    total_price = sum([cafe.print_table('price', where=f'id = {k}')[0][0] * int(v) for k, v in basket.items()])
    basket_count = sum(basket.values())
    return basket_count, total_price, food_count


async def clear_basket(user_id) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    lst = orders.print_table('body', where=f'user_id = {user_id} and status = 0')[0][0]
    if lst:
        orders.update('body = ""', where=f'user_id = {user_id} and status = 0')
        return "–ö–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞!"
    return 0


async def set_rating(food_id, user_id, cmd) -> str | int:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω–∞ –±–ª—é–¥–∞—Ö"""
    altcmd = "dislikes" if cmd == "like" else "likes"
    lst, altlst = cafe.print_table(f'{cmd}s', altcmd, where=f'id = {food_id}')[0]
    if str(user_id) in lst.split():
        return f"–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ {cmd} —ç—Ç–æ–º—É –±–ª—é–¥—É!"

    new_lst = (lst + " " + str(user_id)).strip()
    if str(user_id) in altlst.split():
        altlst = altlst.split()
        altlst.remove(str(user_id))
        new_altlst = " ".join(altlst) if len(altlst) else ""
        cafe.update(f'{altcmd} = "{new_altlst}"', where=f'id = {food_id}')

    cafe.update(f'{cmd}s = "{new_lst}"', where=f'id = {food_id}')
    return 0


async def get_text_basket(tg_id, user_id) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    basket = await get_basket(user_id)
    basket_count, total_price, food_count = await get_count(tg_id)
    text = f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ\n{basket_count} —Ç–æ–≤–∞—Ä–∞(-–æ–≤) –Ω–∞ —Å—É–º–º—É {total_price} —Ä—É–±:\n\n" \
        if len(basket) else "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    return text
