from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.exceptions import BotBlocked
from config import bot, messages, users, cafe
from functions import get_tg_id, add_log, get_current_food_value, get_admins, get_user_id, decor_private, get_time
from keyboards import kb_cancel_button, kb_client_main_menu, kb_client_cafe_menu, kb_admin_yes_no_button
from keyboards import kb_admin_main_menu


# ========================================================
#                        CANCEL
# ========================================================

async def cancel_button(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    tg_id = await get_tg_id(message)
    user_id = await get_user_id(message)
    current_state = await state.get_state()
    if current_state is None:
        return
    await add_log(f"ID_{user_id}: [–û—Ç–º–µ–Ω–∞ {current_state}]")
    await bot.send_message(tg_id, f"–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await kb_client_main_menu())
    return await state.finish()

# ========================================================
#                       END CANCEL
# ========================================================


# ========================================================
#                       EDIT FOOD
# ========================================================
class AdminEditFood(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    value = State()
    column = None
    food_id = None
    current_value = None


async def admin_edit_food(callback: types.CallbackQuery):
    column, food_id = callback.data.split('_')[1:]
    AdminEditFood.food_id, AdminEditFood.column = food_id, column
    tg_id = await get_tg_id(callback)
    await AdminEditFood.value.set()
    await add_log(f"TG_{tg_id} –æ—Ç–∫—Ä—ã–ª —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞ ID_{food_id}, –∫–æ–ª–æ–Ω–∫–∞: {column}.")
    AdminEditFood.current_value = str(await get_current_food_value(food_id, column))
    text = "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n" + AdminEditFood.current_value
    text += "\n"
    match column:
        case "name":
            text += "(–í–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏)\n"
        case "price" | "weight":
            text += "(–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!)\n"
        case "caption":
            text += "(–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞)\n"
        case "image":
            text += "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π!)\n"
        case "composition":
            text += "(–í–≤–æ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞, –≤–∫–ª—é—á–∞—è —Å–æ—É—Å—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å).)\n"
    text += "\n–ù–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
    await callback.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column}")
    await callback.message.answer(text, reply_markup=await kb_cancel_button())


async def admin_edit_food_reply(message: types.Message, state: FSMContext):
    tg_id = await get_tg_id(message)
    async with state.proxy() as data:
        data["value"] = message.text.replace('"', "''")
    value = data['value']
    match AdminEditFood.column:
        case "name" | "caption" | "image" | "composition":
            if AdminEditFood.column == 'image' and "://" not in value:
                return await message.answer("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
            value = f'"{value}"'
        case "price" | "weight":
            if not value.isdigit():
                return await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
            elif int(value) < 1:
                return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
    cafe.update(f'{AdminEditFood.column} = {value}', where=f'id = {AdminEditFood.food_id}')
    change_text = f"TG_{tg_id} –∏–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ [{AdminEditFood.column}] —Å [{AdminEditFood.current_value}] " \
                  f"–Ω–∞ [{value}] —É –±–ª—é–¥–∞ ID_{AdminEditFood.food_id}"
    await add_log(change_text)

    for admin in await get_admins():
        await bot.send_message(admin, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä " + change_text)

    await message.answer('–ú–µ–Ω—é –∑–∞–≤–µ–¥–µ–Ω–∏—è', reply_markup=await kb_client_cafe_menu())

    await state.finish()

# ========================================================
#                      END EDIT FOOD
# ========================================================


# ========================================================
#                        MAILING
# ========================================================
class AdminMailing(StatesGroup):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    text = State()
    confirm = State()
    message_id = None


@decor_private
async def admin_mailing(message: types.Message):
    tg_id = await get_tg_id(message)
    await AdminMailing.text.set()
    await add_log(f"TG_{tg_id} –∑–∞—à–µ–ª –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    msg_text = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" \
               "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ <code>–û—Ç–º–µ–Ω–∞</code>"
    await message.reply(msg_text, reply_markup=ReplyKeyboardRemove(), parse_mode='html')


async def admin_mailing_reply(message: types.Message, state: FSMContext):
    tg_id = await get_tg_id(message)
    async with state.proxy() as data:
        data["text"] = message.text.replace('"', "''")
    messages.write('adm_id', 'message', values=f'''{tg_id}, "{data['text']}"''')
    AdminMailing.message_id = messages.print_table('id', where=f'adm_id = {tg_id}', order_by='id DESC LIMIT 1')[0][0]
    await add_log(f"TG_{tg_id} —Å–¥–µ–ª–∞–ª –∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ID_{AdminMailing.message_id}")
    msg_text = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞:\n\n{data['text']}\n\n" \
               f"<code>–î–∞</code> - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, <code>–ù–µ—Ç</code> - –æ—Ç–º–µ–Ω–∏—Ç—å"
    await message.answer(msg_text, reply_markup=await kb_admin_yes_no_button(), parse_mode='html')
    await AdminMailing.next()


async def admin_mailing_confirm_reply(message: types.Message, state: FSMContext):
    tg_id = await get_tg_id(message)
    async with state.proxy() as data:
        data["confirm"] = message.text.lower().replace('"', "''").strip("'")

    if data["confirm"] == "–Ω–µ—Ç":
        log_text, msg_text = "–æ—Ç–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ", '–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ'

    elif data["confirm"] == "–¥–∞":
        messages.update(f'answer_time = "{await get_time()}"', where=f'id = {AdminMailing.message_id}')
        all_users = [tg[0] for tg in users.print_table('tg_id', where=f'notification = 1')]
        errors = ""

        for user in all_users:
            try:
                await bot.send_message(user, data['text'])
            except BotBlocked:
                errors += f"TG_{user}, "
        log_text = "–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
        number = len(all_users) - len(errors.split())
        msg_text = f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {errors}'

    else:
        log_text, msg_text = "–æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É."

    await add_log(f"TG_{tg_id} {log_text} ID_{AdminMailing.message_id} –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await message.answer(msg_text, reply_markup=await kb_admin_main_menu())
    return await state.finish()


# ========================================================
#                      END MAILING
# ========================================================


# ====================== LOADING ======================
def register_handlers_storage_admin(dp: Dispatcher):
    dp.register_message_handler(cancel_button, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(cancel_button, commands=["–æ—Ç–º–µ–Ω–∞", "–Ω–∞–∑–∞–¥"], state="*")
    dp.register_callback_query_handler(admin_edit_food, Text(startswith="kea_"))
    dp.register_message_handler(admin_edit_food_reply, state=AdminEditFood.value)
    dp.register_message_handler(admin_mailing, Text(equals="üí¨–†–∞—Å—Å—ã–ª–∫–∞"))
    dp.register_message_handler(admin_mailing_reply, state=AdminMailing.text)
    dp.register_message_handler(admin_mailing_confirm_reply, state=AdminMailing.confirm)


