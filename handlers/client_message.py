from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from config import bot, HELP_MESSAGE, START_MESSAGE, ABOUT_MESSAGE, users
from functions import add_log, get_tg_id, get_admins, get_user_id, get_prev_orders, get_profile_text, get_type_food_id
from keyboards import kb_client_main_menu, kb_client_settings_menu, kb_client_cafe_menu, kb_client_cafe_menu_option
from keyboards import kb_client_inline_menu, kb_client_inline_prev_orders_menu


# =======================================
#               MAIN MENU
# =======================================

async def cmd_client_start_menu(message: types.Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î"""
    tg_id = await get_tg_id(message)
    if (tg_id, ) not in users.print_table('tg_id'):
        username, name = message["from"].username, message["from"].first_name
        text = f" –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! TG: {username}; ID_{tg_id}"
        users.write('tg_id', 'username', 'name', values=f'{tg_id}, "{username}", "{name}"')
        await add_log(text)
        [await bot.send_message(admin, text) for admin in await get_admins()]
        return await bot.send_message(tg_id, START_MESSAGE, parse_mode='html', reply_markup=await kb_client_main_menu())
    await add_log(f"ID_{await get_user_id(message)} –∑–∞—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return await bot.send_message(tg_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb_client_main_menu())

# =======================================
#              END MAIN MENU
# =======================================


# =======================================
#                STATIC
# =======================================
async def cmd_client_static_menu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—ã–∑–æ–≤ –ø–æ–¥–º–µ–Ω—é"""
    user_id, tg_id = await get_user_id(message), await get_tg_id(message)
    new_kb = False

    match message.text:
        case "‚ùì –ü–æ–º–æ—â—å" | "/help":
            log_text, text = "–ø–æ–º–æ—â—å", HELP_MESSAGE
        case "üíº –û –Ω–∞—Å" | "/about":
            log_text, text = "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏", ABOUT_MESSAGE
            await bot.send_location(tg_id, latitude=60.16347184315989, longitude=30.355113890416416)
        case "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" | "/profile":
            log_text, text = "–ø—Ä–æ—Ñ–∏–ª—å", await get_profile_text(user_id)
        case "‚òé –ü–æ–∑–≤–æ–Ω–∏—Ç—å" | "/call":
            log_text, text = "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è", "–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +12345678901"
        case "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã" | "/orders":
            log_text, text = "–∞—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", await get_prev_orders(user_id, tg_id)
            new_kb, kb = True, await kb_client_inline_prev_orders_menu(user_id)

    await add_log(f"ID_{user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç {log_text}")
    return await bot.send_message(tg_id, text, parse_mode='html') if not new_kb else \
        await bot.send_message(tg_id, text, parse_mode='html', reply_markup=kb)


async def cmd_client_static_submenu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–¥–º–µ–Ω—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    user_id, tg_id = await get_user_id(message), await get_tg_id(message)

    match message.text:
        case "üçî –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üåØ" | "/menu" | "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            text, kb = "–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", await kb_client_cafe_menu()
        case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏" | "/settings":
            text, kb = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", await kb_client_settings_menu()

    await add_log(f"ID_{user_id} –æ—Ç–∫—Ä—ã–ª {text}")
    return await bot.send_message(tg_id, text, reply_markup=kb)


# =======================================
#               END STATIC
# =======================================


# =======================================
#               CAFE MENU
# =======================================

async def cmd_client_cafe_menu_option(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    user_id, tg_id = await get_user_id(message), await get_tg_id(message)
    match message.text:
        case "üåØ –®–∞–≤–µ—Ä–º–∞":
            text = "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ!\n" \
                   "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ –≤ —à–∞–≤–µ—Ä–º–∞—Ö –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –º–∞—Ä–∏–Ω—É–µ—Ç—Å—è –ø–æ–≤–∞—Ä–∞–º–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–∞ –≥—Ä–∏–ª–µ.\n" \
                   "–í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–µ–µ —Ñ–∏–ª–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –≤ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞, " \
                   "–º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ç–µ–ª, –≥–¥–µ –º—è—Å–æ –ø–æ—Ä—Ç–∏—Ç—Å—è —á–∞—Å–∞–º–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ.\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–º –≤–∫—É—Å–µ!"
            b1, b2 = "ü•ó –®–∞–≤–µ—Ä–º–∞ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ", "üåØ –®–∞–≤–µ—Ä–º–∞ –≤ –ª–∞–≤–∞—à–µ"
        case "üå≠ –•–æ—Ç-–î–æ–≥":
            text = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –•–æ—Ç-–¥–æ–≥ –∫–∞–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±—É–ª–æ—á–∫–µ, —Ç–∞–∫ –∏ –≤ –ª–∞–≤–∞—à–µ."
            b1, b2 = "üå≠ –•–æ—Ç-–î–æ–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "ü´î –•–æ—Ç-–î–æ–≥ –≤ –ª–∞–≤–∞—à–µ"
        case "ü•§–ù–∞–ø–∏—Ç–∫–∏":
            text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–∏—Ç–∫–∞."
            b1, b2 = "‚òï–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏", "ü•§–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"
    await add_log(f"ID_{user_id} –∑–∞—à–µ–ª –≤ –ø–æ–¥–≤—ã–±–æ—Ä –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.text[1:].strip()}")
    await bot.send_message(tg_id, text, reply_markup=await kb_client_cafe_menu_option(b1, b2))


async def cmd_client_cafe_menu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    user_id, tg_id = await get_user_id(message), await get_tg_id(message)
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é:"
    food_type = await get_type_food_id(message.text)
    await add_log(f"ID_{user_id} –≤—ã–±—Ä–∞–ª {message.text[1:]}")
    await bot.send_message(tg_id, text, reply_markup=await kb_client_inline_menu(food_type, tg_id))


# =======================================
#             END CAFE MENU
# =======================================


# ====================== LOADING ======================
def register_handlers_client(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.register_message_handler(cmd_client_start_menu, commands=['start'])
    dp.register_message_handler(cmd_client_start_menu, Text(equals='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

    dp.register_message_handler(cmd_client_static_menu, commands=['help', 'about', 'profile', 'call', 'orders'])
    dp.register_message_handler(cmd_client_static_menu, Text(equals='‚ùì –ü–æ–º–æ—â—å'))
    dp.register_message_handler(cmd_client_static_menu, Text(equals='üíº –û –Ω–∞—Å'))
    dp.register_message_handler(cmd_client_static_menu, Text(equals='‚òé –ü–æ–∑–≤–æ–Ω–∏—Ç—å'))
    dp.register_message_handler(cmd_client_static_menu, Text(equals='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
    dp.register_message_handler(cmd_client_static_menu, Text(equals="üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))

    dp.register_message_handler(cmd_client_static_submenu, commands=['menu', 'settings'])
    dp.register_message_handler(cmd_client_static_submenu, Text(equals="üçî –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üåØ"))
    dp.register_message_handler(cmd_client_static_submenu, Text(equals="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    dp.register_message_handler(cmd_client_static_submenu, Text(equals="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="üçî –ë—É—Ä–≥–µ—Ä"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="üå± Vegan"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="üçü –ó–∞–∫—É—Å–∫–∏"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="ü•ó –®–∞–≤–µ—Ä–º–∞ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="üåØ –®–∞–≤–µ—Ä–º–∞ –≤ –ª–∞–≤–∞—à–µ"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="üå≠ –•–æ—Ç-–î–æ–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="ü´î –•–æ—Ç-–î–æ–≥ –≤ –ª–∞–≤–∞—à–µ"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="‚òï–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"))
    dp.register_message_handler(cmd_client_cafe_menu, Text(equals="ü•§–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"))

    dp.register_message_handler(cmd_client_cafe_menu_option, Text(equals="üåØ –®–∞–≤–µ—Ä–º–∞"))
    dp.register_message_handler(cmd_client_cafe_menu_option, Text(equals="üå≠ –•–æ—Ç-–î–æ–≥"))
    dp.register_message_handler(cmd_client_cafe_menu_option, Text(equals="ü•§–ù–∞–ø–∏—Ç–∫–∏"))



